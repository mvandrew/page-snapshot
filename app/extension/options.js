// JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

class SettingsManager {
    constructor() {
        this.defaultSettings = {
            domains: [],
            serviceUrl: '',
            serviceMethod: 'POST',
            serviceHeaders: '{}',
            enableAutoSave: true,
            saveInterval: 10, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            saveOnlyOnChange: true,
            enableNotifications: true,
            enableDebug: false,
            maxRetries: 3
        };

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        this.MIN_SAVE_INTERVAL = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
        this.MAX_SAVE_INTERVAL = 60; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 60 —Å–µ–∫—É–Ω–¥

        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.loadSettings();
        this.updateIntervalDescription();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        const enableAutoSave = document.getElementById('enable-auto-save').checked;
        this.toggleAutoSaveControls(enableAutoSave);
    }

    setupEventListeners() {
        // –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('settings-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveSettings();
        });

        // –°–ª–∞–π–¥–µ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        document.getElementById('save-interval').addEventListener('input', (e) => {
            this.updateIntervalDescription();
        });

        // –ß–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        document.getElementById('enable-auto-save').addEventListener('change', (e) => {
            this.toggleAutoSaveControls(e.target.checked);
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
        document.getElementById('add-domain-btn').addEventListener('click', () => {
            this.addDomain();
        });

        // Enter –≤ –ø–æ–ª–µ –¥–æ–º–µ–Ω–∞
        document.getElementById('new-domain').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.addDomain();
            }
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('reset-settings').addEventListener('click', () => {
            this.resetSettings();
        });

        document.getElementById('test-connection').addEventListener('click', () => {
            this.testConnection();
        });

        // –°—Å—ã–ª–∫–∏ –≤ —Ñ—É—Ç–µ—Ä–µ
        document.getElementById('help-link').addEventListener('click', (e) => {
            e.preventDefault();
            this.openHelp();
        });

        document.getElementById('feedback-link').addEventListener('click', (e) => {
            e.preventDefault();
            this.openFeedback();
        });
    }

    async loadSettings() {
        try {
            const result = await chrome.storage.sync.get(Object.keys(this.defaultSettings));
            const settings = { ...this.defaultSettings, ...result };

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã
            this.loadDomains(settings.domains);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            document.getElementById('service-url').value = settings.serviceUrl;
            document.getElementById('enable-auto-save').checked = settings.enableAutoSave !== false;
            document.getElementById('save-interval').value = settings.saveInterval;
            document.getElementById('save-only-on-change').checked = settings.saveOnlyOnChange;
            document.getElementById('enable-notifications').checked = settings.enableNotifications;
            document.getElementById('enable-debug').checked = settings.enableDebug;
            document.getElementById('max-retries').value = settings.maxRetries;

            this.showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
        } catch (error) {
            console.error('Error loading settings:', error);
            this.showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    loadDomains(domains) {
        const domainsList = document.getElementById('domains-list');
        domainsList.innerHTML = '';

        domains.forEach((domain, index) => {
            this.createDomainItem(domain, index);
        });
    }

    createDomainItem(domain, index) {
        const domainsList = document.getElementById('domains-list');

        const domainItem = document.createElement('div');
        domainItem.className = 'domain-item';
        domainItem.innerHTML = `
      <span class="domain-text">${this.escapeHtml(domain)}</span>
      <div class="domain-actions">
        <button type="button" class="domain-btn edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" data-index="${index}">‚úèÔ∏è</button>
        <button type="button" class="domain-btn delete" title="–£–¥–∞–ª–∏—Ç—å" data-index="${index}">üóëÔ∏è</button>
      </div>
    `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        domainItem.querySelector('.domain-btn.edit').addEventListener('click', () => {
            this.editDomain(index);
        });

        domainItem.querySelector('.domain-btn.delete').addEventListener('click', () => {
            this.deleteDomain(index);
        });

        domainsList.appendChild(domainItem);
    }

    addDomain() {
        const input = document.getElementById('new-domain');
        const domain = input.value.trim();

        if (!domain) {
            this.showStatus('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω', 'error');
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if (!this.isValidRegex(domain)) {
            this.showStatus('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const currentDomains = this.getCurrentDomains();
        if (currentDomains.includes(domain)) {
            this.showStatus('–î–æ–º–µ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω', 'error');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω
        currentDomains.push(domain);
        this.loadDomains(currentDomains);

        input.value = '';
        this.showStatus('–î–æ–º–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }

    editDomain(index) {
        const currentDomains = this.getCurrentDomains();
        const domain = currentDomains[index];

        const newDomain = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω:', domain);
        if (newDomain === null) return; // –û—Ç–º–µ–Ω–µ–Ω–æ

        const trimmedDomain = newDomain.trim();
        if (!trimmedDomain) {
            this.showStatus('–î–æ–º–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
            return;
        }

        if (!this.isValidRegex(trimmedDomain)) {
            this.showStatus('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            return;
        }

        currentDomains[index] = trimmedDomain;
        this.loadDomains(currentDomains);
        this.showStatus('–î–æ–º–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
    }

    deleteDomain(index) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω?')) return;

        const currentDomains = this.getCurrentDomains();
        currentDomains.splice(index, 1);
        this.loadDomains(currentDomains);
        this.showStatus('–î–æ–º–µ–Ω —É–¥–∞–ª–µ–Ω', 'success');
    }

    getCurrentDomains() {
        const domainItems = document.querySelectorAll('.domain-item .domain-text');
        return Array.from(domainItems).map(item => item.textContent);
    }

    isValidRegex(pattern) {
        try {
            new RegExp(pattern);
            return true;
        } catch (e) {
            return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    normalizeSaveInterval(interval) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
        const numInterval = parseInt(interval, 10);

        // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –º–µ–Ω—å—à–µ 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (isNaN(numInterval) || numInterval < 0) {
            return this.MIN_SAVE_INTERVAL;
        }

        // –ï—Å–ª–∏ 0, –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (numInterval === 0) {
            return 0;
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        return Math.max(this.MIN_SAVE_INTERVAL, Math.min(this.MAX_SAVE_INTERVAL, numInterval));
    }

    toggleAutoSaveControls(enabled) {
        const saveIntervalInput = document.getElementById('save-interval');
        const saveOnlyOnChangeInput = document.getElementById('save-only-on-change');

        saveIntervalInput.disabled = !enabled;
        saveOnlyOnChangeInput.disabled = !enabled;

        if (enabled) {
            this.updateIntervalDescription();
        } else {
            document.getElementById('interval-description').textContent = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ';
        }
    }

    updateIntervalDescription() {
        const interval = parseInt(document.getElementById('save-interval').value);
        const normalizedInterval = this.normalizeSaveInterval(interval);
        const valueSpan = document.getElementById('interval-value');
        const descriptionSpan = document.getElementById('interval-description');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        if (interval !== normalizedInterval) {
            document.getElementById('save-interval').value = normalizedInterval;
            valueSpan.textContent = normalizedInterval;
        } else {
            valueSpan.textContent = interval;
        }

        if (normalizedInterval === 0) {
            descriptionSpan.textContent = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ';
        } else if (normalizedInterval < 60) {
            descriptionSpan.textContent = `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${normalizedInterval} —Å–µ–∫—É–Ω–¥`;
        } else {
            const minutes = Math.floor(normalizedInterval / 60);
            const seconds = normalizedInterval % 60;
            const timeStr = minutes > 0 ? `${minutes}–º ${seconds}—Å` : `${seconds}—Å`;
            descriptionSpan.textContent = `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${timeStr}`;
        }
    }

    async saveSettings() {
        try {
            const rawInterval = parseInt(document.getElementById('save-interval').value);
            const normalizedInterval = this.normalizeSaveInterval(rawInterval);

            const enableAutoSave = document.getElementById('enable-auto-save').checked;
            const settings = {
                domains: this.getCurrentDomains(),
                serviceUrl: document.getElementById('service-url').value.trim(),
                enableAutoSave: enableAutoSave,
                saveInterval: enableAutoSave ? normalizedInterval : 0,
                saveOnlyOnChange: document.getElementById('save-only-on-change').checked,
                enableNotifications: document.getElementById('enable-notifications').checked,
                enableDebug: document.getElementById('enable-debug').checked,
                maxRetries: parseInt(document.getElementById('max-retries').value)
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = this.validateSettings(settings);
            if (!validation.isValid) {
                this.showStatus(validation.message, 'error');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±—ã–ª –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
            if (rawInterval !== normalizedInterval) {
                this.showStatus(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —Å ${rawInterval} –¥–æ ${normalizedInterval} —Å–µ–∫—É–Ω–¥`, 'info');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await chrome.storage.sync.set(settings);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º background script –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            chrome.runtime.sendMessage({
                action: 'settingsUpdated',
                settings: settings
            });

            this.showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'success');

            // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.hideStatus();
            }, 3000);

        } catch (error) {
            console.error('Error saving settings:', error);
            this.showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    validateSettings(settings) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Å–µ—Ä–≤–∏—Å–∞
        if (settings.serviceUrl) {
            try {
                new URL(settings.serviceUrl);
            } catch (e) {
                return {
                    isValid: false,
                    message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Å–µ—Ä–≤–∏—Å–∞'
                };
            }
        }


        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if (settings.saveInterval < 0 || settings.saveInterval > this.MAX_SAVE_INTERVAL) {
            return {
                isValid: false,
                message: `–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ ${this.MAX_SAVE_INTERVAL} —Å–µ–∫—É–Ω–¥`
            };
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (settings.saveInterval > 0 && settings.saveInterval < this.MIN_SAVE_INTERVAL) {
            return {
                isValid: false,
                message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${this.MIN_SAVE_INTERVAL} —Å–µ–∫—É–Ω–¥`
            };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
        if (settings.maxRetries < 1 || settings.maxRetries > 10) {
            return {
                isValid: false,
                message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10'
            };
        }

        return { isValid: true };
    }

    async resetSettings() {
        if (!confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
            return;
        }

        try {
            await chrome.storage.sync.clear();
            await this.loadSettings();
            this.showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã', 'success');
        } catch (error) {
            console.error('Error resetting settings:', error);
            this.showStatus('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    async testConnection() {
        const serviceUrl = document.getElementById('service-url').value.trim();

        if (!serviceUrl) {
            this.showStatus('–£–∫–∞–∂–∏—Ç–µ URL —Å–µ—Ä–≤–∏—Å–∞', 'error');
            return;
        }

        try {
            this.showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', 'info');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            const response = await fetch(serviceUrl, {
                method: 'HEAD',
                mode: 'no-cors'
            });

            this.showStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ', 'success');
        } catch (error) {
            console.error('Connection test failed:', error);
            this.showStatus('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    showStatus(message, type) {
        const statusMessage = document.getElementById('status-message');
        statusMessage.textContent = message;
        statusMessage.className = `status-message show ${type}`;
    }

    hideStatus() {
        const statusMessage = document.getElementById('status-message');
        statusMessage.classList.remove('show');
    }

    openHelp() {
        chrome.tabs.create({
            url: 'https://github.com/your-repo/page-snapshot/wiki'
        });
    }

    openFeedback() {
        chrome.tabs.create({
            url: 'https://github.com/your-repo/page-snapshot/issues'
        });
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new SettingsManager();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('Settings page error:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
});
